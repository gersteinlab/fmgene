# main file for fmgene project
# status: in development

import sys, os

import numpy as np

from sklearn.metrics import accuracy_score, roc_auc_score, precision_score, recall_score, f1_score, matthews_corrcoef
from networks import CNN_paper
from utils import read_json

def print_net(net):
    print('train:', len(net.train_data))
    print('valid:', len(net.valid_data))
    print('test :', len(net.test_data))
    print('samples:', net.train_data.index_list)

def NeuralNet(config, train, wrapper):
    print('Dataset', config['type'])
    reports = []
    accuracies = []
    roc_aucs = []
    precisions = []
    recalls = []
    f1_scores = []
    mccs = []
    
    config['model_name'] += config['type']
    model_name = config['model_name']

    for exp_idx in range(config['num_exps']):
        config['model_name'] = model_name + str(exp_idx)
        config['seed'] += exp_idx*2
        net = wrapper(config)
        
        if train:
            net.train()
        else:
            net.load()

        _, _, preds, labels = net.test(raw=True)
        
        preds_rounded = np.round(preds)

        accuracy = accuracy_score(labels, preds_rounded)
        labels_binary = [np.argmax(label) for label in labels]
        preds_binary = [np.argmax(pred) for pred in preds]
        precision = precision_score(labels_binary, preds_binary)
        recall = recall_score(labels_binary, preds_binary)
        f1 = f1_score(labels_binary, preds_binary)
        mcc = matthews_corrcoef(labels_binary, preds_binary)

        try:
            roc_auc = roc_auc_score(labels, preds)
        except:
            print('skipped one')
            continue

        accuracies.append(accuracy)
        precisions.append(precision)
        recalls.append(recall)
        f1_scores.append(f1)
        mccs.append(mcc)
        roc_aucs.append(roc_auc)

        reports.append({'accuracy': accuracy, 'roc_auc': roc_auc, 'precision': precision, 
                        'recall': recall, 'f1_score': f1, 'mcc': mcc})
        config['model_name'] = model_name

    avg_accuracy = np.mean(accuracies)
    std_accuracy = np.std(accuracies)
    avg_precision = np.mean(precisions)
    std_precision = np.std(precisions)
    avg_recall = np.mean(recalls)
    std_recall = np.std(recalls)
    avg_f1 = np.mean(f1_scores)
    std_f1 = np.std(f1_scores)
    avg_mcc = np.mean(mccs)
    std_mcc = np.std(mccs)
    avg_roc_auc = np.mean(roc_aucs)
    std_roc_auc = np.std(roc_aucs)

    model_info_str = (f"{model_name} Average Accuracy: {avg_accuracy:.4f} (±{std_accuracy:.4f}), "
                      f"Average Precision: {avg_precision:.4f} (±{std_precision:.4f}), "
                      f"Average Recall: {avg_recall:.4f} (±{std_recall:.4f}), "
                      f"Average F1 Score: {avg_f1:.4f} (±{std_f1:.4f}), "
                      f"Average MCC: {avg_mcc:.4f} (±{std_mcc:.4f}), "
                      f"Average ROC AUC: {avg_roc_auc:.4f} (±{std_roc_auc:.4f})\n\n")
    return reports, avg_accuracy, std_accuracy, avg_precision, std_precision, avg_recall, std_recall, avg_f1, std_f1, avg_mcc, std_mcc, avg_roc_auc, std_roc_auc, model_info_str

def main():
    train = True
    train = False

    out = ''
    
    # Resting
    config_cnn = read_json('./config.json')['cnn_paper']
    config_cnn['type'] = 'Resting'
    result = NeuralNet(config_cnn, train=train, wrapper=CNN_paper)
    out += result[-1]

    # MoCo
    config_cnn = read_json('./config.json')['cnn_paper']
    config_cnn['type'] = 'MoCo'
    result = NeuralNet(config_cnn, train=train, wrapper=CNN_paper)
    out += result[-1]
    
    # all
    config_cnn = read_json('./config.json')['cnn_paper']
    config_cnn['type'] = 'all'
    result = NeuralNet(config_cnn, train=train, wrapper=CNN_paper)
    out += result[-1]

    print(out)
    
    '''
    # # net1.get_map() #visualize the feature maps generated by convolutional layers
    # # net.get_shap()
    fpr1, tpr1, threshold1, auc1  = net1.get_curve()
    fpr2, tpr2, threshold2, auc2 = net2.get_curve(config2)
    fpr, tpr, threshold, auc = net.get_curve(config)

    plt.plot(fpr,tpr,label="gene model, AUC="+str(auc))
    plt.plot(fpr1, tpr1, label = "fMRI model, AUC="+str(auc1))
    plt.plot(fpr2, tpr2, label = "combined model, AUC="+str(auc2))
    plt.ylabel('True Positive Rate')
    plt.xlabel('False Positive Rate' )
    plt.legend()
    plt.savefig('gene_AUC.png')
    '''

if __name__ == '__main__':
    main()